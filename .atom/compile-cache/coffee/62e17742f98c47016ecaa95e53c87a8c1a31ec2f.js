(function() {
  var Color, SVGColors, cmykToRGB, hcgToRGB, hexARGBToRGB, hexRGBAToRGB, hexToRGB, hslToRGB, hsvToHWB, hsvToRGB, hwbToHSV, hwbToRGB, loadConverters, ref, rgbToCMYK, rgbToHCG, rgbToHSL, rgbToHSV, rgbToHWB, rgbToHex, rgbToHexARGB, rgbToHexRGBA;

  ref = [], SVGColors = ref[0], cmykToRGB = ref[1], hexARGBToRGB = ref[2], hexRGBAToRGB = ref[3], hexToRGB = ref[4], hslToRGB = ref[5], hcgToRGB = ref[6], hsvToHWB = ref[7], hsvToRGB = ref[8], hwbToHSV = ref[9], hwbToRGB = ref[10], rgbToCMYK = ref[11], rgbToHex = ref[12], rgbToHexARGB = ref[13], rgbToHexRGBA = ref[14], rgbToHSL = ref[15], rgbToHSV = ref[16], rgbToHWB = ref[17], rgbToHCG = ref[18];

  loadConverters = function() {
    var ref1;
    if (cmykToRGB == null) {
      return ref1 = require('./color-conversions'), cmykToRGB = ref1.cmykToRGB, hexARGBToRGB = ref1.hexARGBToRGB, hexRGBAToRGB = ref1.hexRGBAToRGB, hexToRGB = ref1.hexToRGB, hslToRGB = ref1.hslToRGB, hcgToRGB = ref1.hcgToRGB, hsvToHWB = ref1.hsvToHWB, hsvToRGB = ref1.hsvToRGB, hwbToHSV = ref1.hwbToHSV, hwbToRGB = ref1.hwbToRGB, rgbToCMYK = ref1.rgbToCMYK, rgbToHex = ref1.rgbToHex, rgbToHexARGB = ref1.rgbToHexARGB, rgbToHexRGBA = ref1.rgbToHexRGBA, rgbToHSL = ref1.rgbToHSL, rgbToHSV = ref1.rgbToHSV, rgbToHWB = ref1.rgbToHWB, rgbToHCG = ref1.rgbToHCG, ref1;
    }
  };

  module.exports = Color = (function() {
    Color.colorComponents = [['red', 0], ['green', 1], ['blue', 2], ['alpha', 3]];

    Color.isValid = function(color) {
      return (color != null) && !color.invalid && (color.red != null) && (color.green != null) && (color.blue != null) && (color.alpha != null) && !isNaN(color.red) && !isNaN(color.green) && !isNaN(color.blue) && !isNaN(color.alpha);
    };

    function Color(r, g, b, a) {
      var expr, i, j, k, len, ref1, v;
      if (r == null) {
        r = 0;
      }
      if (g == null) {
        g = 0;
      }
      if (b == null) {
        b = 0;
      }
      if (a == null) {
        a = 1;
      }
      if (typeof r === 'object') {
        if (Array.isArray(r)) {
          for (i = j = 0, len = r.length; j < len; i = ++j) {
            v = r[i];
            this[i] = v;
          }
        } else {
          for (k in r) {
            v = r[k];
            this[k] = v;
          }
        }
      } else if (typeof r === 'string') {
        if (SVGColors == null) {
          SVGColors = require('./svg-colors');
        }
        if (r in SVGColors.allCases) {
          this.name = r;
          r = SVGColors.allCases[r];
        }
        expr = r.replace(/\#|0x/, '');
        if (expr.length === 6) {
          this.hex = expr;
          this.alpha = 1;
        } else {
          this.hexARGB = expr;
        }
      } else {
        ref1 = [r, g, b, a], this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], this.alpha = ref1[3];
      }
    }

    Color.colorComponents.forEach(function(arg) {
      var component, index;
      component = arg[0], index = arg[1];
      return Object.defineProperty(Color.prototype, component, {
        enumerable: true,
        get: function() {
          return this[index];
        },
        set: function(component) {
          return this[index] = component;
        }
      });
    });

    Object.defineProperty(Color.prototype, 'rgb', {
      enumerable: true,
      get: function() {
        return [this.red, this.green, this.blue];
      },
      set: function(arg) {
        this.red = arg[0], this.green = arg[1], this.blue = arg[2];
      }
    });

    Object.defineProperty(Color.prototype, 'rgba', {
      enumerable: true,
      get: function() {
        return [this.red, this.green, this.blue, this.alpha];
      },
      set: function(arg) {
        this.red = arg[0], this.green = arg[1], this.blue = arg[2], this.alpha = arg[3];
      }
    });

    Object.defineProperty(Color.prototype, 'argb', {
      enumerable: true,
      get: function() {
        return [this.alpha, this.red, this.green, this.blue];
      },
      set: function(arg) {
        this.alpha = arg[0], this.red = arg[1], this.green = arg[2], this.blue = arg[3];
      }
    });

    Object.defineProperty(Color.prototype, 'hsv', {
      enumerable: true,
      get: function() {
        loadConverters();
        return rgbToHSV(this.red, this.green, this.blue);
      },
      set: function(hsv) {
        var ref1;
        loadConverters();
        return ref1 = hsvToRGB.apply(this.constructor, hsv), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hsva', {
      enumerable: true,
      get: function() {
        return this.hsv.concat(this.alpha);
      },
      set: function(hsva) {
        var h, ref1, s, v;
        loadConverters();
        h = hsva[0], s = hsva[1], v = hsva[2], this.alpha = hsva[3];
        return ref1 = hsvToRGB.apply(this.constructor, [h, s, v]), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hcg', {
      enumerable: true,
      get: function() {
        loadConverters();
        return rgbToHCG(this.red, this.green, this.blue);
      },
      set: function(hcg) {
        var ref1;
        loadConverters();
        return ref1 = hcgToRGB.apply(this.constructor, hcg), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hcga', {
      enumerable: true,
      get: function() {
        return this.hcg.concat(this.alpha);
      },
      set: function(hcga) {
        var c, gr, h, ref1;
        loadConverters();
        h = hcga[0], c = hcga[1], gr = hcga[2], this.alpha = hcga[3];
        return ref1 = hcgToRGB.apply(this.constructor, [h, c, gr]), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hsl', {
      enumerable: true,
      get: function() {
        loadConverters();
        return rgbToHSL(this.red, this.green, this.blue);
      },
      set: function(hsl) {
        var ref1;
        loadConverters();
        return ref1 = hslToRGB.apply(this.constructor, hsl), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hsla', {
      enumerable: true,
      get: function() {
        return this.hsl.concat(this.alpha);
      },
      set: function(hsl) {
        var h, l, ref1, s;
        loadConverters();
        h = hsl[0], s = hsl[1], l = hsl[2], this.alpha = hsl[3];
        return ref1 = hslToRGB.apply(this.constructor, [h, s, l]), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hwb', {
      enumerable: true,
      get: function() {
        loadConverters();
        return rgbToHWB(this.red, this.green, this.blue);
      },
      set: function(hwb) {
        var ref1;
        loadConverters();
        return ref1 = hwbToRGB.apply(this.constructor, hwb), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hwba', {
      enumerable: true,
      get: function() {
        return this.hwb.concat(this.alpha);
      },
      set: function(hwb) {
        var b, h, ref1, w;
        loadConverters();
        h = hwb[0], w = hwb[1], b = hwb[2], this.alpha = hwb[3];
        return ref1 = hwbToRGB.apply(this.constructor, [h, w, b]), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hex', {
      enumerable: true,
      get: function() {
        loadConverters();
        return rgbToHex(this.red, this.green, this.blue);
      },
      set: function(hex) {
        var ref1;
        loadConverters();
        return ref1 = hexToRGB(hex), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hexARGB', {
      enumerable: true,
      get: function() {
        loadConverters();
        return rgbToHexARGB(this.red, this.green, this.blue, this.alpha);
      },
      set: function(hex) {
        var ref1;
        loadConverters();
        return ref1 = hexARGBToRGB(hex), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], this.alpha = ref1[3], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'hexRGBA', {
      enumerable: true,
      get: function() {
        loadConverters();
        return rgbToHexRGBA(this.red, this.green, this.blue, this.alpha);
      },
      set: function(hex) {
        var ref1;
        loadConverters();
        return ref1 = hexRGBAToRGB(hex), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], this.alpha = ref1[3], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'cmyk', {
      enumerable: true,
      get: function() {
        loadConverters();
        return rgbToCMYK(this.red, this.green, this.blue, this.alpha);
      },
      set: function(cmyk) {
        var c, k, m, ref1, y;
        loadConverters();
        c = cmyk[0], m = cmyk[1], y = cmyk[2], k = cmyk[3];
        return ref1 = cmykToRGB(c, m, y, k), this.red = ref1[0], this.green = ref1[1], this.blue = ref1[2], ref1;
      }
    });

    Object.defineProperty(Color.prototype, 'length', {
      enumerable: true,
      get: function() {
        return 4;
      }
    });

    Object.defineProperty(Color.prototype, 'hue', {
      enumerable: true,
      get: function() {
        return this.hsl[0];
      },
      set: function(hue) {
        var hsl;
        hsl = this.hsl;
        hsl[0] = hue;
        return this.hsl = hsl;
      }
    });

    Object.defineProperty(Color.prototype, 'saturation', {
      enumerable: true,
      get: function() {
        return this.hsl[1];
      },
      set: function(saturation) {
        var hsl;
        hsl = this.hsl;
        hsl[1] = saturation;
        return this.hsl = hsl;
      }
    });

    Object.defineProperty(Color.prototype, 'lightness', {
      enumerable: true,
      get: function() {
        return this.hsl[2];
      },
      set: function(lightness) {
        var hsl;
        hsl = this.hsl;
        hsl[2] = lightness;
        return this.hsl = hsl;
      }
    });

    Object.defineProperty(Color.prototype, 'luma', {
      enumerable: true,
      get: function() {
        var b, g, r;
        r = this[0] / 255;
        g = this[1] / 255;
        b = this[2] / 255;
        r = r <= 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
        g = g <= 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4);
        b = b <= 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4);
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
      }
    });

    Object.defineProperty(Color.prototype, 'suggestionValues', {
      enumerable: true,
      get: function() {
        var rnd;
        rnd = Math.round;
        return [this.alpha === 1 ? "#" + this.hex : "#" + this.hexRGBA, this.toCSS()];
      }
    });

    Color.prototype.isLiteral = function() {
      return (this.variables == null) || this.variables.length === 0;
    };

    Color.prototype.isValid = function() {
      return this.constructor.isValid(this);
    };

    Color.prototype.clone = function() {
      return new Color(this.red, this.green, this.blue, this.alpha);
    };

    Color.prototype.isEqual = function(color) {
      return color.red === this.red && color.green === this.green && color.blue === this.blue && color.alpha === this.alpha;
    };

    Color.prototype.interpolate = function(col, ratio, preserveAlpha) {
      var iratio;
      if (preserveAlpha == null) {
        preserveAlpha = true;
      }
      iratio = 1 - ratio;
      if (col == null) {
        return clone();
      }
      return new Color(Math.floor(this.red * iratio + col.red * ratio), Math.floor(this.green * iratio + col.green * ratio), Math.floor(this.blue * iratio + col.blue * ratio), Math.floor(preserveAlpha ? this.alpha : this.alpha * iratio + col.alpha * ratio));
    };

    Color.prototype.transparentize = function(alpha) {
      return new Color(this.red, this.green, this.blue, alpha);
    };

    Color.prototype.blend = function(color, method, preserveAlpha) {
      var a, b, g, r;
      if (preserveAlpha == null) {
        preserveAlpha = true;
      }
      r = method(this.red, color.red);
      g = method(this.green, color.green);
      b = method(this.blue, color.blue);
      a = preserveAlpha ? this.alpha : method(this.alpha, color.alpha);
      return new Color(r, g, b, a);
    };

    Color.prototype.toCSS = function() {
      var rnd;
      rnd = Math.round;
      if (this.alpha === 1) {
        return "rgb(" + (rnd(this.red)) + "," + (rnd(this.green)) + "," + (rnd(this.blue)) + ")";
      } else {
        return "rgba(" + (rnd(this.red)) + "," + (rnd(this.green)) + "," + (rnd(this.blue)) + "," + this.alpha + ")";
      }
    };

    Color.prototype.serialize = function() {
      return [this.red, this.green, this.blue, this.alpha];
    };

    return Color;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
