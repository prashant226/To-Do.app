exports.id=53,exports.ids=[53],exports.modules={1630:(e,t,i)=>{i.r(t),i.d(t,{AIProviderService:()=>AIProviderService,getMaxCharacters:()=>m});var n=i(1398),o=i(5287),a=i(5313),r=i(9634),s=i(4832);async function c(e){let t=[{label:"OpenAI",kind:n.QuickPickItemKind.Separator},{label:"OpenAI",description:"GPT-4 Turbo",provider:"openai",model:"gpt-4-turbo-preview"},{label:"OpenAI",description:"GPT-4",provider:"openai",model:"gpt-4"},{label:"OpenAI",description:"GPT-4 32k",provider:"openai",model:"gpt-4-32k"},{label:"OpenAI",description:"GPT-3.5 Turbo",provider:"openai",model:"gpt-3.5-turbo-1106"},{label:"Anthropic",kind:n.QuickPickItemKind.Separator},{label:"Anthropic",description:"Claude 3 Opus",provider:"anthropic",model:"claude-3-opus-20240229"},{label:"Anthropic",description:"Claude 3 Sonnet",provider:"anthropic",model:"claude-3-sonnet-20240229"},{label:"Anthropic",description:"Claude 2.1",provider:"anthropic",model:"claude-2.1"},{label:"Anthropic",description:"Claude 2.0",provider:"anthropic",model:"claude-2"},{label:"Anthropic",description:"Claude Instant",provider:"anthropic",model:"claude-instant-1"}];null!=e?t=t.filter(t=>t.kind!==n.QuickPickItemKind.Separator&&t.provider===e):e=s.H.get("ai.experimental.provider")??"openai";let i=s.H.get(`ai.experimental.${e}.model`);for(let o of(null==i&&(i="anthropic"===e?"claude-2.1":"gpt-4-turbo-preview"),t))if(o.kind!==n.QuickPickItemKind.Separator&&o.model===i){o.description=`${o.description}  \u2713`,o.picked=!0;break}return await n.window.showQuickPick(t,{title:"Switch AI Model",placeHolder:"select an AI model to use for experimental AI features",matchOnDescription:!0})}var l=i(3459),h=i(2471);let AnthropicProvider=class AnthropicProvider{constructor(e){this.container=e}id="anthropic";name="Anthropic";dispose(){}get model(){return s.H.get("ai.experimental.anthropic.model")||null}async getOrChooseModel(){let e=this.model;if(null!=e)return e;let t=await c(this.id);if(null!=t)return await s.H.updateEffective(`ai.experimental.${t.provider}.model`,t.model),t.model}async generateCommitMessage(e,t){let i=await d(this.container.storage);if(null==i)return;let o=await this.getOrChooseModel();if(null==o)return;let a=s.H.get("experimental.generateCommitMessagePrompt");a.endsWith(".")||(a+=".");let r=`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful commit message. Compose a commit message that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`;try{let s,c;return"claude-instant-1"===o||"claude-2"===o?[s,c]=await this.makeLegacyRequest(o,i,i=>{let n=e.substring(0,i),o=`

Human: ${r}

Human: Here is the code diff to use to generate the commit message:

${n}
`;return t?.context&&(o+=`
Human: Here is additional context which should be taken into account when generating the commit message:

${t.context}
`),a&&(o+=`
Human: ${a}
`),o+="\nAssistant:"},4096):[s,c]=await this.makeRequest(o,i,r,i=>{let n=e.substring(0,i),o={role:"user",content:[{type:"text",text:"Here is the code diff to use to generate the commit message:"},{type:"text",text:n}]};return t?.context&&o.content.push({type:"text",text:"Here is additional context which should be taken into account when generating the commit message:"},{type:"text",text:t.context}),a&&o.content.push({type:"text",text:a}),[o]},4096),e.length>c&&n.window.showWarningMessage(`The diff of the changes had to be truncated to ${c} characters to fit within the Anthropic's limits.`),s}catch(e){throw Error(`Unable to generate commit message: ${e.message}`)}}async explainChanges(e,t){let i=await d(this.container.storage);if(null==i)return;let o=await this.getOrChooseModel();if(null==o)return;let a=`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`;try{let r,s;return"claude-instant-1"===o||"claude-2"===o?[r,s]=await this.makeLegacyRequest(o,i,i=>{let n=t.substring(0,i);return`

Human: ${a}

Human: Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${e}

Human: Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${n}

Human: Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase. And please don't explain how you arrived at the explanation, just provide the explanation.
Assistant:`},4096):[r,s]=await this.makeRequest(o,i,a,i=>{let n=t.substring(0,i);return[{role:"user",content:[{type:"text",text:"Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:"},{type:"text",text:e},{type:"text",text:"Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:"},{type:"text",text:n},{type:"text",text:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase. And please don't explain how you arrived at the explanation, just provide the explanation"}]}]},4096),t.length>s&&n.window.showWarningMessage(`The diff of the changes had to be truncated to ${s} characters to fit within the Anthropic's limits.`),r}catch(e){throw Error(`Unable to explain changes: ${e.message}`)}}async makeRequest(e,t,i,n,o){let a=0,r=m(e,2600);for(;;){let s={model:e,messages:n(r),system:i,stream:!1,max_tokens:o},c=await this.fetch(t,s);if(!c.ok){let e;try{e=await c.json()}catch{}if(a++<2&&e?.error?.type==="invalid_request_error"&&e?.error?.message?.includes("prompt is too long")){r-=500*a;continue}throw Error(`(${this.name}:${c.status}) ${e?.error?.message||c.statusText})`)}return[(await c.json()).content.map(e=>e.text).join("\n").trim(),r]}}fetch(e,t){return(0,l.hd)("https://api.anthropic.com/v1/messages",{headers:{Accept:"application/json",Authorization:`Bearer ${e}`,"Content-Type":"application/json","X-API-Key":e,"anthropic-version":"2023-06-01"},method:"POST",body:JSON.stringify(t)})}async makeLegacyRequest(e,t,i,n){let o=0,a=m(e,2600);for(;;){let r={model:e,prompt:i(a),stream:!1,max_tokens_to_sample:n},s=await this.fetchLegacy(t,r);if(!s.ok){let e;try{e=await s.json()}catch{}if(o++<2&&e?.error?.type==="invalid_request_error"&&e?.error?.message?.includes("prompt is too long")){a-=500*o;continue}throw Error(`(${this.name}:${s.status}) ${e?.error?.message||s.statusText})`)}return[(await s.json()).completion.trim(),a]}}fetchLegacy(e,t){return(0,l.hd)("https://api.anthropic.com/v1/complete",{headers:{Accept:"application/json",Authorization:`Bearer ${e}`,"Content-Type":"application/json","X-API-Key":e,"anthropic-version":"2023-06-01"},method:"POST",body:JSON.stringify(t)})}};async function d(e){let t=await e.getSecret("gitlens.anthropic.key");if(!t){let i=n.window.createInputBox();i.ignoreFocusOut=!0;let o=[];try{let e={iconPath:new n.ThemeIcon("link-external"),tooltip:"Open the Anthropic API Key Page"};t=await new Promise(t=>{o.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(e=>{if(e&&!/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e)){i.validationMessage="Please enter a valid Anthropic API key";return}i.validationMessage=void 0}),i.onDidAccept(()=>{let e=i.value.trim();if(!e||!/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e)){i.validationMessage="Please enter a valid Anthropic API key";return}t(e)}),i.onDidTriggerButton(t=>{t===e&&n.env.openExternal(n.Uri.parse("https://console.anthropic.com/account/keys"))})),i.password=!0,i.title="Connect to Anthropic",i.placeholder="Please enter your Anthropic API key to use this feature",i.prompt=(0,h.Av)("input-prompt-links")?'Enter your [Anthropic API Key](https://console.anthropic.com/account/keys "Get your Anthropic API key")':"Enter your Anthropic API Key",i.buttons=[e],i.show()})}finally{i.dispose(),o.forEach(e=>void e.dispose())}if(!t)return;e.storeSecret("gitlens.anthropic.key",t)}return t}let OpenAIProvider=class OpenAIProvider{constructor(e){this.container=e}id="openai";name="OpenAI";dispose(){}get model(){return s.H.get("ai.experimental.openai.model")||null}get url(){return s.H.get("ai.experimental.openai.url")||"https://api.openai.com/v1/chat/completions"}async getOrChooseModel(){let e=this.model;if(null!=e)return e;let t=await c(this.id);if(null!=t)return await s.H.updateEffective(`ai.experimental.${t.provider}.model`,t.model),t.model}async generateCommitMessage(e,t){let i=await p(this.container.storage);if(null==i)return;let o=await this.getOrChooseModel();if(null==o)return;let a=0,r=m(o,2600);for(;;){let c=e.substring(0,r),l=s.H.get("experimental.generateCommitMessagePrompt");l.endsWith(".")||(l+=".");let h={model:o,messages:[{role:"system",content:`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful commit message. Compose a commit message that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`},{role:"user",content:`Here is the code diff to use to generate the commit message:

${c}`},...t?.context?[{role:"user",content:`Here is additional context which should be taken into account when generating the commit message:

${t.context}`}]:[],{role:"user",content:l}]},d=await this.fetch(i,h);if(!d.ok){let e;if(404===d.status)throw Error(`Unable to generate commit message: Your API key doesn't seem to have access to the selected '${o}' model`);if(429===d.status)throw Error(`Unable to generate commit message: (${this.name}:${d.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);try{e=await d.json()}catch{}if(a++<2&&e?.error?.code==="context_length_exceeded"){r-=500*a;continue}throw Error(`Unable to generate commit message: (${this.name}:${d.status}) ${e?.error?.message||d.statusText}`)}return e.length>r&&n.window.showWarningMessage(`The diff of the changes had to be truncated to ${r} characters to fit within the OpenAI's limits.`),(await d.json()).choices[0].message.content.trim()}}async explainChanges(e,t){let i=await p(this.container.storage);if(null==i)return;let o=await this.getOrChooseModel();if(null==o)return;let a=0,r=m(o,3e3);for(;;){let s=t.substring(0,r),c={model:o,messages:[{role:"system",content:`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`},{role:"user",content:`Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${e}`},{role:"user",content:`Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${s}`},{role:"user",content:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase."}]},l=await this.fetch(i,c);if(!l.ok){let e;if(404===l.status)throw Error(`Unable to explain commit: Your API key doesn't seem to have access to the selected '${o}' model`);if(429===l.status)throw Error(`Unable to explain commit: (${this.name}:${l.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);try{e=await l.json()}catch{}if(a++<2&&e?.error?.code==="context_length_exceeded"){r-=500*a;continue}throw Error(`Unable to explain commit: (${this.name}:${l.status}) ${e?.error?.message||l.statusText}`)}return t.length>r&&n.window.showWarningMessage(`The diff of the changes had to be truncated to ${r} characters to fit within the OpenAI's limits.`),(await l.json()).choices[0].message.content.trim()}}fetch(e,t){let i=this.url,n=i.includes(".azure.com");return(0,l.hd)(i,{headers:{Accept:"application/json","Content-Type":"application/json",...n?{"api-key":e}:{Authorization:`Bearer ${e}`}},method:"POST",body:JSON.stringify(t)})}};async function p(e){let t=await e.getSecret("gitlens.openai.key");if(!t){let i=n.window.createInputBox();i.ignoreFocusOut=!0;let o=[];try{let e={iconPath:new n.ThemeIcon("link-external"),tooltip:"Open the OpenAI API Key Page"};t=await new Promise(t=>{o.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(e=>{if(e&&!/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e)){i.validationMessage="Please enter a valid OpenAI API key";return}i.validationMessage=void 0}),i.onDidAccept(()=>{let e=i.value.trim();if(!e||!/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e)){i.validationMessage="Please enter a valid OpenAI API key";return}t(e)}),i.onDidTriggerButton(t=>{t===e&&n.env.openExternal(n.Uri.parse("https://platform.openai.com/account/api-keys"))})),i.password=!0,i.title="Connect to OpenAI",i.placeholder="Please enter your OpenAI API key to use this feature",i.prompt=(0,h.Av)("input-prompt-links")?'Enter your [OpenAI API Key](https://platform.openai.com/account/api-keys "Get your OpenAI API key")':"Enter your OpenAI API Key",i.buttons=[e],i.show()})}finally{i.dispose(),o.forEach(e=>void e.dispose())}if(!t)return;e.storeSecret("gitlens.openai.key",t)}return t}let AIProviderService=class AIProviderService{constructor(e){this.container=e}_provider;dispose(){this._provider?.dispose()}get providerId(){return this._provider?.id}async generateCommitMessage(e,t){let i;if(Array.isArray(e))i=e.join("\n");else{let n=(0,r.Z6)(e)?e:this.container.git.getRepository(e);if(null==n)throw Error("Unable to find repository");let o=await this.container.git.getDiff(n.uri,a.id);if(!o?.contents&&(o=await this.container.git.getDiff(n.uri,a.SU),!o?.contents))throw Error("No changes to generate a commit message from.");if(t?.cancellation?.isCancellationRequested)return;i=o.contents}let o=await this.getOrChooseProvider();if(null!=o&&await u(o,this.container.storage)&&!t?.cancellation?.isCancellationRequested)return t?.progress!=null?n.window.withProgress(t.progress,async()=>o.generateCommitMessage(i,{context:t?.context})):o.generateCommitMessage(i,{context:t?.context})}async explainCommit(e,t,i){let a;if("string"==typeof e||e instanceof n.Uri){if("string"!=typeof t||!t)throw Error("Invalid arguments provided");a=await this.container.git.getCommit(e,t)}else{if("string"==typeof t)throw Error("Invalid arguments provided");a=(0,o.WM)(e)?e:await this.container.git.getCommit(e.repoPath,e.ref),i=t}if(null==a)throw Error("Unable to find commit");let r=await this.container.git.getDiff(a.repoPath,a.sha);if(!r?.contents)throw Error("No changes found to explain.");let s=await this.getOrChooseProvider();if(null!=s&&await u(s,this.container.storage))return(a.hasFullDetails()||(await a.ensureFullDetails(),(0,o.aQ)(a)),i?.progress!=null)?n.window.withProgress(i.progress,async()=>s.explainChanges(a.message,r.contents)):s.explainChanges(a.message,r.contents)}reset(){let{providerId:e}=this;null!=e&&(this.container.storage.deleteSecret(`gitlens.${e}.key`),this.container.storage.delete(`confirm:ai:tos:${e}`),this.container.storage.deleteWorkspace(`confirm:ai:tos:${e}`))}supports(e){return"anthropic"===e||"openai"===e}async switchProvider(){await this.getOrChooseProvider(!0)}async getOrChooseProvider(e){let t=e?void 0:s.H.get("ai.experimental.provider")||void 0;if(null==t||!this.supports(t)){let e=await c();if(null==e)return;t=e.provider,await s.H.updateEffective("ai.experimental.provider",t),await s.H.updateEffective(`ai.experimental.${t}.model`,e.model)}return t!==this._provider?.id&&(this._provider?.dispose(),"anthropic"===t?this._provider=new AnthropicProvider(this.container):(this._provider=new OpenAIProvider(this.container),"openai"!==t&&await s.H.updateEffective("ai.experimental.provider","openai"))),this._provider}};async function u(e,t){if(t.get(`confirm:ai:tos:${e.id}`,!1)||t.getWorkspace(`confirm:ai:tos:${e.id}`,!1))return!0;let i={title:"Yes"},o={title:"Always for this Workspace"},a={title:"Always"},r=await n.window.showInformationMessage(`This GitLens experimental feature requires sending a diff of the code changes to ${e.name}. This may contain sensitive information.

Do you want to continue?`,{modal:!0},i,o,a,{title:"No",isCloseAffordance:!0});return r===i||(r===o?(t.storeWorkspace(`confirm:ai:tos:${e.id}`,!0),!0):r===a&&(t.store(`confirm:ai:tos:${e.id}`,!0),!0))}function m(e,t){let i;switch(e){case"gpt-4-turbo-preview":case"gpt-4-0125-preview":case"gpt-4-1106-preview":i=128e3;break;case"gpt-4-32k":case"gpt-4-32k-0613":i=32768;break;case"gpt-4":case"gpt-4-0613":i=8192;break;case"gpt-3.5-turbo-1106":case"gpt-3.5-turbo-16k":i=16385;break;case"gpt-3.5-turbo":default:i=4096;break;case"claude-3-opus-20240229":case"claude-3-sonnet-20240229":case"claude-2.1":i=2e5;break;case"claude-2":case"claude-instant-1":i=1e5}let n=3.1*i-t/3.1;return Math.floor(n-.1*n)}}};